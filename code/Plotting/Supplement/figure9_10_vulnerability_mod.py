#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 12 16:16:32 2021

@author: insauer
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import cartopy
import cartopy.io.shapereader as shpreader
import cartopy.crs as ccrs
import matplotlib.patches as mpatches

fig3 = plt.figure(constrained_layout=True, figsize=(8.3, 8.3))
gs = fig3.add_gridspec(20, 15)
plt.subplots_adjust(wspace=2, hspace=2)

DATA_TSFull= pd.read_csv('/home/insauer/projects/Attribution/Floods/Paper_NC_Resubmission_data/Aggregation_attribution_modeled/VulnerabilityAdjustmentTimeSeriesRegions_mod.csv')
DATA_TS= pd.read_csv('/home/insauer/projects/Attribution/Floods/Paper_NC_Resubmission_data/Aggregation_attribution_modeled/VulnerabilityAdjustmentTimeSeriesSubregions_mod.csv')

DATA_FIT_Full= pd.read_csv('/home/insauer/projects/Attribution/Floods/Paper_NC_Resubmission_data/Aggregation_attribution_modeled/VulnerabilityAdjustmentMetaDataRegions_mod.csv')
DATA_FIT= pd.read_csv('/home/insauer/projects/Attribution/Floods/Paper_NC_Resubmission_data/Aggregation_attribution_modeled/VulnerabilityAdjustmentMetaDataSubregions_mod.csv')



region_names={'GLB': 'Global (GLB)',
              'NAM':'North America (NAM)',
              'CHN':'Eastern Asia (EAS)',
              
              'AUS':'Oceania (OCE)',
              'LAM':'Latin America (LAM)',
              'EUR':'Europe (EUR)',
              'SWEA':'South & South-East Asia (SEA)',
              'SSAF':'South & Sub-Saharan Africa (SSA)',
              'CAS':'Central Asia & Russia (CAS)',
              'NAFARA':'North Africa & Middle East (NAF)',
              }

region_abs={'NAM':'NAM', 
          'LAM':'LAM', 
          'EUR':'EUR',
          'NAFARA': 'NAF',
          'SSAF':'SSA',
          'CAS':'CAS',
          'SWEA':'SEA', 
          'CHN':'EAS', 
          'AUS':'OCE',
          'GLB': 'GLB'}

regions = list(region_names)
r = 0
for i in range(5):
    for j in range(3):
        
        DATA_regionFull = DATA_TSFull[(DATA_TSFull['Region']==regions[r]) & 
                      (DATA_TSFull ['Year']<2011) & (DATA_TSFull ['Year']>1979)]
        
        DATA_region = DATA_TS[(DATA_TS['Region']==regions[r]) & 
                      (DATA_TS['Year']<2011) & (DATA_TS['Year']>1979)]
        
        
        
        f3_ax1 = fig3.add_subplot(gs[4*i:4*i+4,j*5:(j*5)+5])
        
        if j ==0:
        
        
            f3_ax1.set_xlim((1979 ,2012))
    
            # f3_ax1.plot(DATA_regionFull['Year'], np.log10(DATA_regionFull['Impact_Pred_1thrd']), color='#8856a7', alpha = 0.5, linewidth = 1.)
            # f3_ax1.plot(DATA_regionFull['Year'], np.log10(DATA_regionFull['Impact_Pred_2thrd']), color='#8856a7', alpha = 0.5, linewidth = 1.)
            f3_ax1.scatter(DATA_regionFull['Year'], DATA_regionFull['ratios'], label='$D_{Obs}$/$D_{CliExp}', color='firebrick', marker = 'o', s = 2) 
            #f3_ax1.scatter(DATA_regionFull['Year'], DATA_regionFull['vul_ratio'], label='Ratio', color='seagreen', marker = 'o', s = 2)
            
            f3_ax1.plot(DATA_regionFull['Year'], DATA_regionFull['vul_funcSSA5'], label='Vulnerability function', color='black', linewidth = 1.5)
            if r ==5:
                f3_ax1.set_title(' '+ region_names[regions[r]], position = (0.5,0.80), fontsize = 7.5)
                
            else:
                f3_ax1.set_title(' '+ region_names[regions[r]], position = (0.5,0.80), fontsize = 7.5)
            f3_ax1.tick_params(axis="y", length = 4, labelsize = 7, pad = 0)
            f3_ax1.set_xticks([1980,1990,2000,2010])
            if i ==4:
                f3_ax1.set_xticklabels(['1980','1990','2000','2010'])
            else:
                f3_ax1.set_xticklabels(['','','',''])
            f3_ax1.tick_params(axis="x", length = 4, labelsize = 7)
          
            
            if i ==2 and j ==0:
                f3_ax1.set_ylabel('Vulnerability Factor', fontsize=9.5, labelpad=3)
                
            yticks = np.round(np.array([0,f3_ax1.get_ylim()[1]/3, 2*f3_ax1.get_ylim()[1]/3 ]),3)
            
            if yticks.max() >10:
                
                yticklabels = np.round(yticks,0).astype(str)
                
            elif yticks.max() >1:
                
                yticklabels = np.round(yticks,1).astype(str)
            
            else:
                
                yticklabels = np.round(yticks,2).astype(str)
            
            f3_ax1.set_yticks(yticks)
            f3_ax1.set_yticklabels(yticklabels)
            
            f3_ax1.set_ylim((f3_ax1.get_ylim()[0],f3_ax1.get_ylim()[1]+f3_ax1.get_ylim()[1]*0.13))
        else:
            
                
            f3_ax1.set_xlim((1979 ,2012))
            
            
            if j ==1:
                dis = 'Pos'
                f3_ax1.set_title('{}'.format(region_abs[regions[r]]+'$_{+}$'), position = (0.5,0.80), fontsize = 7.5)
                if i ==4:
                    f3_ax1.set_xlabel('Year', fontsize = 10)
                dis2= 'pos'
            else:
                dis = 'Neg'
                f3_ax1.set_title('{}'.format(region_abs[regions[r]]+'$_{-}$'), position = (0.5,0.80), fontsize = 7.5)
                dis2 = 'neg'
                
            

            f3_ax1.scatter(DATA_region['Year'], DATA_region['ratios{}'.format(dis)], label='D$_{Obs}$ / D$_{CliExp}$', color='firebrick', marker = 'o', s =2) 
        
            f3_ax1.plot(DATA_region['Year'], DATA_region['vul_funcSSA5{}'.format(dis)], label='Vulnerability function', color='black', linewidth = 1.5)


            yticks = np.round(np.array([0,f3_ax1.get_ylim()[1]/3, 2*f3_ax1.get_ylim()[1]/3 ]),3)
            
            if yticks.max() >10:
                
                yticklabels = np.round(yticks,0).astype(str)
                
            elif yticks.max() >1:
                
                yticklabels = np.round(yticks,1).astype(str)
            
            else:
                
                yticklabels = np.round(yticks,2).astype(str)
            
            f3_ax1.tick_params(axis="y", length = 2, labelsize = 7, pad = 0)
            f3_ax1.set_xticks([1980,1990,2000,2010])
            f3_ax1.set_yticks(yticks)
            f3_ax1.set_yticklabels(yticklabels)
            if i ==4 and (j==1 or j==2):
                f3_ax1.set_xticklabels(['1980','1990','2000','2010'])
            
            else:
                
                f3_ax1.set_xticklabels(['','','',''])
            
            # if (i==1) and (j==1):
            #     f3_ax1.set_yticklabels(['', '', ''])
            
            f3_ax1.tick_params(axis="x", length = 4, labelsize = 7)
            f3_ax1.set_ylim((f3_ax1.get_ylim()[0],f3_ax1.get_ylim()[1]+f3_ax1.get_ylim()[1]*0.13))
            

            if i ==4 and j == 2:
                
                handles, labels = f3_ax1.get_legend_handles_labels()
                f3_ax1.legend(handles, labels, bbox_to_anchor = (1.0,-0.2), frameon=True, fontsize = 7) 

        
    r+=1

plt.savefig('/home/insauer/projects/NC_Submission/Data/Figures/Supplement/SI9_1_5_VulFunc.png',bbox_inches = 'tight',dpi =600)
plt.savefig('/home/insauer/projects/NC_Submission/Data/Figures/Supplement/SI9_1_5_VulFunc.pdf',bbox_inches = 'tight', format = 'pdf')

#f3_ax1.set_title('gs[0, :]')
#f3_ax2 = fig3.add_subplot(gs[1, :-1])
#f3_ax2.set_title('gs[1, :-1]')
#f3_ax3 = fig3.add_subplot(gs[1:, -1])
#f3_ax3.set_title('gs[1:, -1]')
#f3_ax4 = fig3.add_subplot(gs[-1, 0])
#f3_ax4.set_title('gs[-1, 0]')
#f3_ax5 = fig3.add_subplot(gs[-1, -2])
#f3_ax5.set_title('gs[-1, -2]')